plugins {
  id 'java-library'
  id 'org.springframework.boot'
  id 'io.spring.dependency-management'
  id 'jacoco'
}

repositories {
  gradlePluginPortal()
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

ext {
  set('springCloudVersion', '2023.0.1')
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  customConfig.extendsFrom testImplementation
  compile.exclude module: 'spring-boot-starter-tomcat'
  testAnnotationProcessor.extendsFrom annotationProcessor
  testCompileOnly.extendsFrom compileOnly
}

jacoco {
  toolVersion = "0.8.11"
  reportsDirectory = file("$buildDir/customJacocoReportDir")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-actuator:3.1.2")
  implementation("org.springframework.boot:spring-boot-starter-webflux:3.1.2")
  implementation("org.springframework.boot:spring-boot-starter-validation:3.1.2")
  implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive:3.1.2")

  implementation("org.json:json:20231013")
  implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
  implementation("com.fasterxml.jackson.core:jackson-databind:2.15.1")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2")
  implementation("commons-io:commons-io:2.11.0")
  implementation("commons-codec:commons-codec:1.15")
  implementation("com.google.guava:guava:31.1-jre")
  implementation("com.google.code.gson:gson:2.10.1")
  implementation("io.projectreactor:reactor-tools:3.5.8")
  implementation("io.jsonwebtoken:jjwt-api:0.11.5")
  runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5", "io.jsonwebtoken:jjwt-jackson:0.11.5")
  implementation("org.apache.commons:commons-text:1.10.0")
  implementation("org.apache.commons:commons-lang3:3.12.0")
  implementation("org.apache.commons:commons-collections4:4.4")
  implementation("org.apache.tomcat.embed:tomcat-embed-core:11.0.0-M9")
  implementation("org.mapstruct:mapstruct:1.5.5.Final")

  compileOnly("jakarta.servlet:jakarta.servlet-api:6.1.0-M1")
  compileOnly('org.projectlombok:lombok:1.18.26')
  testCompileOnly('org.projectlombok:lombok:1.18.26')
  implementation 'org.springframework.boot:spring-boot-configuration-processor'

  annotationProcessor('org.projectlombok:lombok:1.18.26')
  annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:3.1.2")
  annotationProcessor('org.springframework.boot:spring-boot-autoconfigure:3.1.0')

  testAnnotationProcessor('org.projectlombok:lombok:1.18.26')
  testImplementation('org.springframework.boot:spring-boot-starter-test:3.4.2')
  testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.7.1")
  testImplementation("com.github.tomakehurst:wiremock-jre8-standalone:2.35.0")
  testImplementation("org.mockito:mockito-inline:5.2.0")
  testImplementation("org.testcontainers:junit-jupiter:1.18.3")
  testImplementation("io.projectreactor:reactor-test:3.5.8")
  testImplementation("org.apache.httpcomponents.client5:httpclient5-win:5.2.1")
}

def additionalCompilerArgs = [
  "-Amapstruct.defaultComponentModel=spring",
  "-Amapstruct.unmappedTargetPolicy=ERROR",
  "-Amapstruct.defaultInjectionStrategy=constructor"
]

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs += additionalCompilerArgs
}

test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
    showStackTraces = true
    showExceptions = true
    showCauses = true
  }
  finalizedBy jacocoTestReport
}